Live Character Counter for Textarea

HTML BREAKDOWN:
1. FIELD: Textarea (User Input Box)

Requirement:
- Field should not be empty when typing starts.
- Should allow any characters (letters, numbers, symbols, spaces).
- Must dynamically update the character count as the user types.

VALID INPUTS:
- "Hello" → Character count = 5
- "12345" → Character count = 5
- "Hi there!" → Character count = 9

INVALID INPUTS:
- Empty string "" → Character count = 0
- Only spaces " " → Still valid, count increases based on spaces

2. FIELD: Character Counter Display

Requirement:
- Counter should always match the length of text inside textarea.
- Should update instantly without pressing a button.

VALID BEHAVIOUR:
- Typing "Hi" → Counter shows 2
- Deleting all text → Counter resets to 0

INVALID BEHAVIOUR:
- Counter does not change when typing → Failure
- Counter does not reset to 0 when textarea is cleared → Failure

3. FORM SUBMISSION (Not Applicable)
- This is not a form, only a live counter → no submit action.



CSS STYLING BREAKDOWN: 

1. ELEMENT: body (Page Background)
- Purpose: Sets overall background and page style.
- font-family: Arial, sans-serif; → Clean, modern font for readability.
- background-color: white; → Plain white background.
- margin: 20px; → Adds spacing around the page content.

2. ELEMENT: .box (Main Container)
- Purpose: Styles the main rectangular box containing counter.
- border: 2px solid #000; → Black border for visibility.
- padding: 15px; → Space inside the box.
- margin: 20px auto; → Adds spacing and centers the box horizontally.
- max-width: 700px; → Prevents box from stretching too wide.
- background-color: #fff; → White background inside box.

3. ELEMENT: textarea (Typing Area)
- Purpose: Provides an area for typing input text.
- width: 96%; → Covers most of the container width.
- height: 80px; → Sets height of typing box.
- padding: 10px; → Space inside textarea for text.
- font-size: 15px; → Sets readable text size.
- border: 1px solid #aaa; → Light gray border.
- resize: vertical; → Allows user to change height only (not width).
- margin-bottom: 10px; → Adds space below textarea.



JAVASCRIPT FUNCTIONALITY:
const textInput = document.getElementById("textInput"); 
// Grabs the textarea element by its ID

const charCount = document.getElementById("charCount"); 
// Grabs the span element where character count will display

textInput.addEventListener("input", () => { 
  // Listens for any typing, deleting, or pasting in textarea
  charCount.textContent = textInput.value.length; 
  // Updates counter with current text length
});


Working:
- Every time the user types or deletes, the input event is triggered.
- The script calculates the length of text inside textarea.
- The span (#charCount) is updated in real-time with this number.

LEARNING OUTCOMES
1. How to create a live character counter in a webpage.
2. Learnt how to use JavaScript events (input) to detect typing.
3. How to use DOM manipulation to update content dynamically.