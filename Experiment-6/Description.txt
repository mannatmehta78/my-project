Dynamic SVG Drawing Tool – Experiment 6

Introduction
This experiment implements an "interactive SVG drawing tool" where users can draw freehand paths on a canvas by dragging their mouse.
It builds upon the concepts from "Experiment 5 (Product Filter)", extending knowledge of DOM manipulation into "graphics rendering with SVG".
The focus is on "event handling, dynamic element creation, SVG path manipulation, and user interactivity".

Components Used:

HTML Elements:
* `<div class="container">` → Wrapper for the tool.
* `<h2>` → Section heading.
* `<svg id="drawingArea">` → Canvas for drawing.
* `<path>` (dynamic) → Represents each stroke.


JavaScript Techniques:
* 'DOMContentLoaded' → Ensures safe DOM access.
* 'getElementById'` → Selects drawing area.
* 'createElementNS' → Creates SVG elements.
* Event handling: 'mousedown', 'mousemove', 'mouseup', 'mouseleave'.
* Dynamic attribute updates ('setAttribute("d")').
* Helper function for mouse position using 'getBoundingClientRect'.


CSS Techniques:
* Borders for canvas clarity.
* Light background for contrast.
* Cursor set to **crosshair** to indicate drawing mode.


Interactive Mechanism:
1. Mousedown → A new `<path>` is created starting at cursor position.
2. Mousemove → Each movement appends a new line segment to the path.
3. Mouseup → Stops drawing and finalizes the stroke.
4. Mouseleave → Cancels drawing if mouse leaves canvas.
5. Users can repeat the above steps to draw multiple shapes.


Event Explanation Table:

| Event        | Trigger Condition         | Purpose                         |
| ------------ | ------------------------- | ------------------------------- |
| `mousedown`  | User presses mouse in SVG | Start new path                  |
| `mousemove`  | Mouse drag inside SVG     | Extend current path dynamically |
| `mouseup`    | Mouse button released     | End stroke                      |
| `mouseleave` | Mouse exits SVG area      | Cancel current drawing safely   |



Code (with Line-by-Line Explanation):

javascript:
window.addEventListener('DOMContentLoaded', function () { 
    // Ensures the DOM is fully loaded before script runs

    var svg = document.getElementById('drawingArea');  
    // Selects the SVG element (our canvas)

    var isDrawing = false;   
    // Flag to check if mouse is currently drawing

    var currentPath = null;  
    // Stores the current path being drawn

    svg.addEventListener('mousedown', function (e) {  
        // Triggered when user presses mouse inside SVG
        isDrawing = true;  
        // Set drawing flag true
        var point = getMousePosition(e);  
        // Get mouse coordinates relative to SVG
        currentPath = document.createElementNS("http://www.w3.org/2000/svg", "path");  
        // Create a new SVG path element
        currentPath.setAttribute("stroke", "blue");  
        // Set stroke color
        currentPath.setAttribute("fill", "none");  
        // No fill inside path
        currentPath.setAttribute("stroke-width", "2");  
        // Path thickness = 2px
        currentPath.setAttribute("d", "M" + point.x + "," + point.y);  
        // Start drawing path at mouse position
        svg.appendChild(currentPath);  
        // Add path into SVG canvas
    });

    svg.addEventListener('mousemove', function (e) {  
        // Triggered when mouse moves
        if (!isDrawing) return;  
        // Only draw if mouse is pressed
        var point = getMousePosition(e);  
        // Get updated coordinates
        var d = currentPath.getAttribute("d");  
        // Read current "d" attribute of path
        d += " L" + point.x + "," + point.y;  
        // Add new line segment
        currentPath.setAttribute("d", d);  
        // Update path attribute
    });

    svg.addEventListener('mouseup', function () {  
        // Triggered when mouse released
        isDrawing = false;  
        // End drawing
        currentPath = null;  
        // Reset current path
    });

    svg.addEventListener('mouseleave', function () {  
        // Triggered when mouse leaves SVG
        isDrawing = false;  
        // Stop drawing
        currentPath = null;  
        // Reset state
    });

    function getMousePosition(evt) {  
        // Helper function to calculate cursor position inside SVG
        var rect = svg.getBoundingClientRect();  
        // Get SVG’s position on screen
        return { 
            x: evt.clientX - rect.left,  
            y: evt.clientY - rect.top 
        };  
        // Return relative coordinates
    }
});


Flow Summary:
1. Wait for DOM to load.
2. Select the SVG element.
3. On "mousedown", create a new path and start drawing.
4. On "mousemove", extend path continuously.
5. On "mouseup" or "mouseleave", stop drawing.
6. Repeat to create multiple strokes.


Limitations:
* Only supports mouse, no touch events.
* No options for stroke color or thickness.
* Cannot erase specific strokes (only draw forward).
* No "clear canvas" feature by default.


Potential Enhancements:
* Add "color picker" and "stroke width selector".
* Add "clear canvas" and "undo/redo" buttons.
* Enable "saving drawings" as SVG or PNG.
* Add "mobile/touchscreen support".
* Animated stroke rendering (smooth drawing).


Real-World Applications:
* "E-signature tools" in banking/insurance apps.
* "Online whiteboards" and teaching platforms.
* "Sketching tools" for designers.
* "Educational diagrams" (geometry, flowcharts).
* "Interactive games" where paths matter (drawing puzzles).

Comparison with Experiment 5**

| Aspect              | Exp-5 (Product Filter) | Exp-6 (SVG Drawing Tool) |
| ------------------- | ---------------------- | ------------------------ |
| Primary Interaction | Dropdown selection     | Mouse drag               |
| Core Logic          | Show/Hide items        | Path creation            |
| Data Source         | Predefined categories  | Real-time mouse position |
| Accessibility       | `aria-live` updates    | Future ARIA improvements |
| DOM Writes          | `style.display` change | `path` attribute updates |


What I Learned in Experiment-6:
* How to create SVG elements dynamically using createElementNS.
* Constructing and updating SVG <path> with the "d" attribute (M = move, L = line).
* Handling multiple mouse events (mousedown, mousemove, mouseup, mouseleave) together for real-time interaction.
* Mapping mouse coordinates to SVG space using getBoundingClientRect.
* Using a state flag (isDrawing) to manage continuous actions.
* Difference between show/hide existing elements (Exp-5) vs dynamically creating new elements (Exp-6).


Learning Objectives:
* Practice 'SVG element creation' and manipulation.
* Learn 'event-driven drawing logic'.
* Reinforce 'DOM API knowledge' for graphics.
* Understand 'coordinate systems' in browser.
* Experience 'separation of concerns' (HTML = structure, CSS = style, JS = behavior).