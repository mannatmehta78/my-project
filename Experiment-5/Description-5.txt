Dynamic Product Filter with Dropdown using JavaScript DOM Manipulation


1. FIELD: Category Dropdown

Requirement:
1. Dropdown is required (user must select something).
2. Options available: All, Clothing, Electronics, Books.
3. Default value: All → shows every product.

VALID INPUTS:
1. "All" → Displays T-Shirt, Jeans, Headphones, Smartphone, Novel, Cookbook.
2. "Clothing" → Displays T-Shirt, Jeans.
3. "Electronics" → Displays Headphones, Smartphone.
4. "Books" → Displays Novel, Cookbook.

INVALID INPUTS:
1. Empty (no selection) → Not possible since dropdown always has a value.
2. "Shoes" or any other text not in dropdown → Invalid, filtering will fail.


2. FIELD: Product List

Requirement:
1. Each product item must have a data-category attribute.
2. Filtering logic uses this attribute to decide which products to show.

VALID INPUTS:
1. <div class="product" data-category="Clothing">T-Shirt</div> → Will appear when Clothing is selected.
2. <div class="product" data-category="Books">Cookbook</div> → Will appear when Books is selected.

INVALID INPUTS:
<div class="product">Laptop</div> (missing data-category) → Cannot be filtered correctly.


3. FILTER BEHAVIOUR (Dynamic Action)

Requirement:
1. When a user selects a category, products update instantly (no page reload).

VALID BEHAVIOUR:
1. Selecting "All" → All products visible.
2. Selecting "Books" → Only Novel and Cookbook visible.

INVALID BEHAVIOUR:
1. Selecting "Clothing" but still seeing Electronics items → Filtering not working.


4. SUBMISSION (Not applicable)
- There is no form submission.
- Filtering happens in real-time using JavaScript DOM manipulation.



CSS STYLING BREAKDOWN
Here’s how each CSS part contributes to the look of the page:

1. ELEMENT: .container (Main Rectangle Box)
- Purpose: Styles the main wrapper that holds the dropdown and product list.

Properties & Effects:
- border: 1px solid #000; → Creates a clear black border.
- padding: 15px; → Adds space inside the box so content doesn’t touch edges.
- margin: 20px auto; → Adds space outside the box and centers it on the page.
- width: 600px; → Makes the box a wide rectangle.
- border-radius: 6px; → Slightly rounds the corners for a smooth shape.

2. ELEMENT: #product-list (Product List Container)
- Purpose: Arranges all product items neatly.

Properties & Effects:
- display: flex; → Uses flexbox layout.
- flex-direction: column; → Stacks all items vertically.
- gap: 10px; → Adds 10px spacing between each product.
- margin-top: 10px; → Keeps space between dropdown and list.

3. ELEMENT: .product (Single Product Item)
- Purpose: Styles each product so it looks like a small box.

Properties & Effects:
- border: 1px solid #ddd; → Light gray border around each product.
- padding: 8px; → Adds space inside the product box.
- border-radius: 4px; → Slightly rounded corners.
- background: #f9f9f9; → Light background to make products stand out.



LEARNING OUTCOMES
1. Learnt how to create a product filter system using HTML, CSS, and JavaScript.
2. Understood how to use HTML attributes (data-category) to link products with categories.
3. Practiced JavaScript DOM manipulation (querySelectorAll, .dataset, .style.display) to hide and show products dynamically.
4. Learnt to design a rectangle container box with CSS and style individual items neatly.
5. Understood how to write and check test cases for dropdown-based filtering.